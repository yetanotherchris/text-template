apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{Values.appName}}-deployment
  namespace: {{Values.namespace}}
  labels:
    app: {{Values.appName}}
    version: {{Values.version}}
    {{#if Values.environment}}
    environment: {{Values.environment}}
    {{/if}}
    {{#each Values.customLabels}}
    {{@key}}: {{this}}
    {{/each}}
spec:
  replicas: {{Values.replicaCount}}
  selector:
    matchLabels:
      app: {{Values.appName}}
  template:
    metadata:
      labels:
        app: {{Values.appName}}
        version: {{Values.version}}
    spec:
      containers:
      - name: {{Values.appName}}
        image: {{Values.image.repository}}:{{Values.image.tag}}
        ports:
        - containerPort: {{Values.service.port}}
        {{#if Values.env}}
        env:
        {{#each Values.env}}
        - name: {{name}}
          value: "{{value}}"
        {{/each}}
        {{/if}}
        {{#if Values.resources}}
        resources:
          {{#if Values.resources.limits}}
          limits:
            {{#each Values.resources.limits}}
            {{@key}}: {{this}}
            {{/each}}
          {{/if}}
          {{#if Values.resources.requests}}
          requests:
            {{#each Values.resources.requests}}
            {{@key}}: {{this}}
            {{/each}}
          {{/if}}
        {{/if}}
        {{#if Values.volumeMounts}}
        volumeMounts:
        {{#each Values.volumeMounts}}
        - name: {{name}}
          mountPath: {{mountPath}}
          {{#if readOnly}}
          readOnly: {{readOnly}}
          {{/if}}
        {{/each}}
        {{/if}}
      {{#if Values.volumes}}
      volumes:
      {{#each Values.volumes}}
      - name: {{name}}
        {{#if configMap}}
        configMap:
          name: {{configMap.name}}
        {{/if}}
        {{#if secret}}
        secret:
          secretName: {{secret.secretName}}
        {{/if}}
        {{#if persistentVolumeClaim}}
        persistentVolumeClaim:
          claimName: {{persistentVolumeClaim.claimName}}
        {{/if}}
      {{/each}}
      {{/if}}
      {{#if Values.nodeSelector}}
      nodeSelector:
        {{#each Values.nodeSelector}}
        {{@key}}: {{this}}
        {{/each}}
      {{/if}}
      {{#if Values.tolerations}}
      tolerations:
      {{#each Values.tolerations}}
      - key: {{key}}
        operator: {{operator}}
        {{#if value}}
        value: {{value}}
        {{/if}}
        effect: {{effect}}
      {{/each}}
      {{/if}}
---
{{#if Values.service.enabled}}
apiVersion: v1
kind: Service
metadata:
  name: {{Values.appName}}-service
  namespace: {{Values.namespace}}
  labels:
    app: {{Values.appName}}
spec:
  type: {{Values.service.type}}
  ports:
  - port: {{Values.service.port}}
    targetPort: {{Values.service.targetPort}}
    protocol: TCP
    {{#if Values.service.nodePort}}
    nodePort: {{Values.service.nodePort}}
    {{/if}}
  selector:
    app: {{Values.appName}}
{{/if}}
---
{{#if Values.ingress.enabled}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{Values.appName}}-ingress
  namespace: {{Values.namespace}}
  {{#if Values.ingress.annotations}}
  annotations:
    {{#each Values.ingress.annotations}}
    {{@key}}: "{{this}}"
    {{/each}}
  {{/if}}
spec:
  {{#if Values.ingress.tls}}
  tls:
  {{#each Values.ingress.tls}}
  - hosts:
    {{#each hosts}}
    - {{this}}
    {{/each}}
    secretName: {{secretName}}
  {{/each}}
  {{/if}}
  rules:
  {{#each Values.ingress.hosts}}
  - host: {{host}}
    http:
      paths:
      {{#each paths}}
      - path: {{path}}
        pathType: {{pathType}}
        backend:
          service:
            name: {{@root.Values.appName}}-service
            port:
              number: {{@root.Values.service.port}}
      {{/each}}
  {{/each}}
{{/if}}

