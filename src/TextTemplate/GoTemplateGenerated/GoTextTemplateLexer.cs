//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GoTextTemplateLexer.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GoTextTemplateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN_TRIM=1, OPEN=2, TEXT=3, CLOSE_TRIM=4, CLOSE=5, IF=6, ELSE=7, END=8, 
		FOR=9, IN=10, DOT=11, LBRACK=12, RBRACK=13, NUMBER=14, STRING=15, IDENT=16, 
		COMMENT=17, WS=18;
	public const int
		EXPR=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "EXPR"
	};

	public static readonly string[] ruleNames = {
		"OPEN_TRIM", "OPEN", "TEXT", "CLOSE_TRIM", "CLOSE", "IF", "ELSE", "END", 
		"FOR", "IN", "DOT", "LBRACK", "RBRACK", "NUMBER", "STRING", "IDENT", "COMMENT", 
		"WS"
	};


	public GoTextTemplateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GoTextTemplateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{{-'", "'{{'", null, "'-}}'", "'}}'", "'if'", "'else'", "'end'", 
		"'for'", "'in'", "'.'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN_TRIM", "OPEN", "TEXT", "CLOSE_TRIM", "CLOSE", "IF", "ELSE", 
		"END", "FOR", "IN", "DOT", "LBRACK", "RBRACK", "NUMBER", "STRING", "IDENT", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GoTextTemplateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GoTextTemplateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x14', '\x8A', '\b', '\x1', '\b', '\x1', '\x4', '\x2', 
		'\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', 
		'\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', 
		'\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', 
		'\x4', '\v', '\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', 
		'\x4', '\xE', '\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', 
		'\x10', '\x4', '\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', 
		'\x13', '\t', '\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x6', '\x4', '\x37', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x38', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x6', 
		'\xF', '`', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\x61', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 'h', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', 'k', '\v', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 'q', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', 't', '\v', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 'z', '\n', 
		'\x12', '\f', '\x12', '\xE', '\x12', '}', '\v', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x6', '\x13', '\x85', '\n', '\x13', '\r', '\x13', '\xE', '\x13', '\x86', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '{', '\x2', '\x14', '\x4', '\x3', 
		'\x6', '\x4', '\b', '\x5', '\n', '\x6', '\f', '\a', '\xE', '\b', '\x10', 
		'\t', '\x12', '\n', '\x14', '\v', '\x16', '\f', '\x18', '\r', '\x1A', 
		'\xE', '\x1C', '\xF', '\x1E', '\x10', ' ', '\x11', '\"', '\x12', '$', 
		'\x13', '&', '\x14', '\x4', '\x2', '\x3', '\b', '\x3', '\x2', '}', '}', 
		'\x3', '\x2', '\x32', ';', '\x4', '\x2', '$', '$', '^', '^', '\x5', '\x2', 
		'\x43', '\\', '\x61', '\x61', '\x63', '|', '\x6', '\x2', '\x32', ';', 
		'\x43', '\\', '\x61', '\x61', '\x63', '|', '\x5', '\x2', '\v', '\f', '\xF', 
		'\xF', '\"', '\"', '\x2', '\x90', '\x2', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x6', '\x3', '\x2', '\x2', '\x2', '\x2', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\n', '\x3', '\x2', '\x2', '\x2', '\x3', '\f', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\xE', '\x3', '\x2', '\x2', '\x2', '\x3', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\x14', '\x3', '\x2', '\x2', '\x2', '\x3', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\x18', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x3', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\"', '\x3', '\x2', '\x2', '\x2', '\x3', '$', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '&', '\x3', '\x2', '\x2', '\x2', '\x4', '(', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '.', '\x3', '\x2', '\x2', '\x2', '\b', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\n', ':', '\x3', '\x2', '\x2', '\x2', '\f', 
		'@', '\x3', '\x2', '\x2', '\x2', '\xE', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x10', 'H', '\x3', '\x2', '\x2', '\x2', '\x12', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'Q', '\x3', '\x2', '\x2', '\x2', '\x16', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x18', 'X', '\x3', '\x2', '\x2', '\x2', '\x1A', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\\', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'_', '\x3', '\x2', '\x2', '\x2', ' ', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\"', 'n', '\x3', '\x2', '\x2', '\x2', '$', 'u', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x84', '\x3', '\x2', '\x2', '\x2', '(', ')', '\a', '}', '\x2', 
		'\x2', ')', '*', '\a', '}', '\x2', '\x2', '*', '+', '\a', '/', '\x2', 
		'\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '-', '\b', '\x2', '\x2', 
		'\x2', '-', '\x5', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '}', '\x2', 
		'\x2', '/', '\x30', '\a', '}', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\b', '\x3', '\x2', '\x2', '\x32', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x37', '\n', '\x2', '\x2', '\x2', 
		'\x34', '\x35', '\a', '}', '\x2', '\x2', '\x35', '\x37', '\n', '\x2', 
		'\x2', '\x2', '\x36', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\t', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', 
		'/', '\x2', '\x2', ';', '<', '\a', '\x7F', '\x2', '\x2', '<', '=', '\a', 
		'\x7F', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '?', 
		'\b', '\x5', '\x3', '\x2', '?', '\v', '\x3', '\x2', '\x2', '\x2', '@', 
		'\x41', '\a', '\x7F', '\x2', '\x2', '\x41', '\x42', '\a', '\x7F', '\x2', 
		'\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\b', 
		'\x6', '\x3', '\x2', '\x44', '\r', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x46', '\a', 'k', '\x2', '\x2', '\x46', 'G', '\a', 'h', '\x2', '\x2', 
		'G', '\xF', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', 'g', '\x2', '\x2', 
		'I', 'J', '\a', 'n', '\x2', '\x2', 'J', 'K', '\a', 'u', '\x2', '\x2', 
		'K', 'L', '\a', 'g', '\x2', '\x2', 'L', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\a', 'g', '\x2', '\x2', 'N', 'O', '\a', 'p', '\x2', '\x2', 
		'O', 'P', '\a', '\x66', '\x2', '\x2', 'P', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\a', 'h', '\x2', '\x2', 'R', 'S', '\a', 'q', '\x2', 
		'\x2', 'S', 'T', '\a', 't', '\x2', '\x2', 'T', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\a', 'k', '\x2', '\x2', 'V', 'W', '\a', 'p', '\x2', 
		'\x2', 'W', '\x17', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x30', 
		'\x2', '\x2', 'Y', '\x19', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', 
		']', '\x2', '\x2', '[', '\x1B', '\x3', '\x2', '\x2', '\x2', '\\', ']', 
		'\a', '_', '\x2', '\x2', ']', '\x1D', '\x3', '\x2', '\x2', '\x2', '^', 
		'`', '\t', '\x3', '\x2', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x63', 'i', '\a', '$', '\x2', '\x2', '\x64', 'h', 
		'\n', '\x4', '\x2', '\x2', '\x65', '\x66', '\a', '^', '\x2', '\x2', '\x66', 
		'h', '\v', '\x2', '\x2', '\x2', 'g', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'l', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'm', '\a', '$', '\x2', '\x2', 'm', '!', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'r', '\t', '\x5', '\x2', '\x2', 'o', 'q', '\t', '\x6', '\x2', 
		'\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', 
		'\x2', 's', '#', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\a', '\x31', '\x2', '\x2', 'v', 'w', '\a', ',', '\x2', 
		'\x2', 'w', '{', '\x3', '\x2', '\x2', '\x2', 'x', 'z', '\v', '\x2', '\x2', 
		'\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', 
		'\x2', '|', '~', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x7F', '\a', ',', '\x2', '\x2', '\x7F', '\x80', '\a', '\x31', 
		'\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', 
		'\b', '\x12', '\x4', '\x2', '\x82', '%', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x85', '\t', '\a', '\x2', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\b', '\x13', '\x4', 
		'\x2', '\x89', '\'', '\x3', '\x2', '\x2', '\x2', '\f', '\x2', '\x3', '\x36', 
		'\x38', '\x61', 'g', 'i', 'r', '{', '\x86', '\x5', '\a', '\x3', '\x2', 
		'\x6', '\x2', '\x2', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
