//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GoTextTemplateLexer.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GoTextTemplateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN=1, TEXT=2, CLOSE=3, IF=4, ELSE=5, END=6, FOR=7, IN=8, DOT=9, LBRACK=10, 
		RBRACK=11, NUMBER=12, STRING=13, IDENT=14, COMMENT=15, WS=16;
	public const int
		EXPR=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "EXPR"
	};

	public static readonly string[] ruleNames = {
		"OPEN", "TEXT", "CLOSE", "IF", "ELSE", "END", "FOR", "IN", "DOT", "LBRACK", 
		"RBRACK", "NUMBER", "STRING", "IDENT", "COMMENT", "WS"
	};


	public GoTextTemplateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GoTextTemplateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{{'", null, "'}}'", "'if'", "'else'", "'end'", "'for'", "'in'", 
		"'.'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN", "TEXT", "CLOSE", "IF", "ELSE", "END", "FOR", "IN", "DOT", 
		"LBRACK", "RBRACK", "NUMBER", "STRING", "IDENT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GoTextTemplateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GoTextTemplateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x12', 'z', '\b', '\x1', '\b', '\x1', '\x4', '\x2', 
		'\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', 
		'\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', 
		'\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', 
		'\x4', '\v', '\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', 
		'\x4', '\xE', '\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', 
		'\x10', '\x4', '\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x6', '\x3', '-', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '.', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x6', '\r', 
		'P', '\n', '\r', '\r', '\r', '\xE', '\r', 'Q', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', 'X', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '[', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\a', '\xF', '\x61', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\x64', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\a', '\x10', 'j', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 
		'm', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x6', '\x11', 'u', '\n', '\x11', 
		'\r', '\x11', '\xE', '\x11', 'v', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'k', '\x2', '\x12', '\x4', '\x3', '\x6', '\x4', '\b', '\x5', '\n', '\x6', 
		'\f', '\a', '\xE', '\b', '\x10', '\t', '\x12', '\n', '\x14', '\v', '\x16', 
		'\f', '\x18', '\r', '\x1A', '\xE', '\x1C', '\xF', '\x1E', '\x10', ' ', 
		'\x11', '\"', '\x12', '\x4', '\x2', '\x3', '\b', '\x3', '\x2', '}', '}', 
		'\x3', '\x2', '\x32', ';', '\x4', '\x2', '$', '$', '^', '^', '\x5', '\x2', 
		'\x43', '\\', '\x61', '\x61', '\x63', '|', '\x6', '\x2', '\x32', ';', 
		'\x43', '\\', '\x61', '\x61', '\x63', '|', '\x5', '\x2', '\v', '\f', '\xF', 
		'\xF', '\"', '\"', '\x2', '\x80', '\x2', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x6', '\x3', '\x2', '\x2', '\x2', '\x3', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\n', '\x3', '\x2', '\x2', '\x2', '\x3', '\f', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\xE', '\x3', '\x2', '\x2', '\x2', '\x3', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\x14', '\x3', '\x2', '\x2', '\x2', '\x3', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\x18', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x3', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\"', '\x3', '\x2', '\x2', '\x2', '\x4', '$', '\x3', '\x2', 
		'\x2', '\x2', '\x6', ',', '\x3', '\x2', '\x2', '\x2', '\b', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x35', '\x3', '\x2', '\x2', '\x2', '\f', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '=', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x12', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'H', '\x3', '\x2', '\x2', '\x2', '\x16', 'J', '\x3', '\x2', 
		'\x2', '\x2', '\x18', 'L', '\x3', '\x2', '\x2', '\x2', '\x1A', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', 'S', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'^', '\x3', '\x2', '\x2', '\x2', ' ', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\"', 't', '\x3', '\x2', '\x2', '\x2', '$', '%', '\a', '}', '\x2', '\x2', 
		'%', '&', '\a', '}', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\'', '(', '\b', '\x2', '\x2', '\x2', '(', '\x5', '\x3', '\x2', '\x2', 
		'\x2', ')', '-', '\n', '\x2', '\x2', '\x2', '*', '+', '\a', '}', '\x2', 
		'\x2', '+', '-', '\n', '\x2', '\x2', '\x2', ',', ')', '\x3', '\x2', '\x2', 
		'\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', 
		'\x2', '/', '\a', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\x7F', 
		'\x2', '\x2', '\x31', '\x32', '\a', '\x7F', '\x2', '\x2', '\x32', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\b', '\x4', '\x3', '\x2', 
		'\x34', '\t', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', 'k', '\x2', 
		'\x2', '\x36', '\x37', '\a', 'h', '\x2', '\x2', '\x37', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\a', 'g', '\x2', '\x2', '\x39', ':', '\a', 
		'n', '\x2', '\x2', ':', ';', '\a', 'u', '\x2', '\x2', ';', '<', '\a', 
		'g', '\x2', '\x2', '<', '\r', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', 
		'g', '\x2', '\x2', '>', '?', '\a', 'p', '\x2', '\x2', '?', '@', '\a', 
		'\x66', '\x2', '\x2', '@', '\xF', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\a', 'h', '\x2', '\x2', '\x42', '\x43', '\a', 'q', '\x2', '\x2', 
		'\x43', '\x44', '\a', 't', '\x2', '\x2', '\x44', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\a', 'k', '\x2', '\x2', '\x46', 'G', '\a', 
		'p', '\x2', '\x2', 'G', '\x13', '\x3', '\x2', '\x2', '\x2', 'H', 'I', 
		'\a', '\x30', '\x2', '\x2', 'I', '\x15', '\x3', '\x2', '\x2', '\x2', 'J', 
		'K', '\a', ']', '\x2', '\x2', 'K', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\a', '_', '\x2', '\x2', 'M', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'N', 'P', '\t', '\x3', '\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'Y', '\a', '$', '\x2', '\x2', 'T', 'X', '\n', '\x4', '\x2', 
		'\x2', 'U', 'V', '\a', '^', '\x2', '\x2', 'V', 'X', '\v', '\x2', '\x2', 
		'\x2', 'W', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\\', '\x3', '\x2', 
		'\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '$', 
		'\x2', '\x2', ']', '\x1D', '\x3', '\x2', '\x2', '\x2', '^', '\x62', '\t', 
		'\x5', '\x2', '\x2', '_', '\x61', '\t', '\x6', '\x2', '\x2', '`', '_', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\x31', '\x2', '\x2', 
		'\x66', 'g', '\a', ',', '\x2', '\x2', 'g', 'k', '\x3', '\x2', '\x2', '\x2', 
		'h', 'j', '\v', '\x2', '\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 
		'j', 'm', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 
		'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\x3', '\x2', '\x2', '\x2', 
		'm', 'k', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', ',', '\x2', '\x2', 
		'o', 'p', '\a', '\x31', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\b', '\x10', '\x4', '\x2', 'r', '!', '\x3', '\x2', '\x2', '\x2', 
		's', 'u', '\t', '\a', '\x2', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\b', '\x11', '\x4', '\x2', 'y', '#', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x2', '\x3', ',', '.', 'Q', 'W', 'Y', '\x62', 'k', 'v', '\x5', 
		'\a', '\x3', '\x2', '\x6', '\x2', '\x2', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
