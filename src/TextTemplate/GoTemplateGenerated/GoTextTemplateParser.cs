//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GoTextTemplateParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GoTextTemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN_TRIM=1, OPEN=2, TEXT=3, CLOSE_TRIM=4, CLOSE=5, IF=6, ELSE=7, END=8, 
		FOR=9, RANGE=10, IN=11, COLONEQ=12, COMMA=13, DOLLAR=14, DOT=15, LBRACK=16, 
		RBRACK=17, NUMBER=18, STRING=19, BOOLEAN=20, EQ=21, NE=22, LT=23, LE=24, 
		GT=25, GE=26, AND=27, OR=28, NOT=29, PIPE=30, IDENT=31, COMMENT=32, WS=33;
	public const int
		RULE_template = 0, RULE_content = 1, RULE_part = 2, RULE_placeholder = 3, 
		RULE_pipeline = 4, RULE_path = 5, RULE_expr = 6, RULE_value = 7, RULE_ifBlock = 8, 
		RULE_elseIfBlock = 9, RULE_elseBlock = 10, RULE_forBlock = 11, RULE_rangeBlock = 12, 
		RULE_rangeClause = 13, RULE_varList = 14, RULE_varName = 15, RULE_open = 16, 
		RULE_close = 17;
	public static readonly string[] ruleNames = {
		"template", "content", "part", "placeholder", "pipeline", "path", "expr", 
		"value", "ifBlock", "elseIfBlock", "elseBlock", "forBlock", "rangeBlock", 
		"rangeClause", "varList", "varName", "open", "close"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{{-'", "'{{'", null, "'-}}'", "'}}'", "'if'", "'else'", "'end'", 
		"'for'", "'range'", "'in'", "':='", "','", "'$'", "'.'", "'['", "']'", 
		null, null, null, "'eq'", "'ne'", "'lt'", "'le'", "'gt'", "'ge'", "'and'", 
		"'or'", "'not'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN_TRIM", "OPEN", "TEXT", "CLOSE_TRIM", "CLOSE", "IF", "ELSE", 
		"END", "FOR", "RANGE", "IN", "COLONEQ", "COMMA", "DOLLAR", "DOT", "LBRACK", 
		"RBRACK", "NUMBER", "STRING", "BOOLEAN", "EQ", "NE", "LT", "LE", "GT", 
		"GE", "AND", "OR", "NOT", "PIPE", "IDENT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GoTextTemplateParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GoTextTemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GoTextTemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GoTextTemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class TemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GoTextTemplateParser.Eof, 0); }
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 0, RULE_template);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			content();
			State = 37;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartContext[] part() {
			return GetRuleContexts<PartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartContext part(int i) {
			return GetRuleContext<PartContext>(i);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(Context, State);
		EnterRule(_localctx, 2, RULE_content);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 39;
					part();
					}
					} 
				}
				State = 44;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(GoTextTemplateParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlaceholderContext placeholder() {
			return GetRuleContext<PlaceholderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForBlockContext forBlock() {
			return GetRuleContext<ForBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeBlockContext rangeBlock() {
			return GetRuleContext<RangeBlockContext>(0);
		}
		public PartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartContext part() {
		PartContext _localctx = new PartContext(Context, State);
		EnterRule(_localctx, 4, RULE_part);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				Match(TEXT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				placeholder();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 47;
				ifBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 48;
				forBlock();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 49;
				rangeBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceholderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PipelineContext pipeline() {
			return GetRuleContext<PipelineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseContext close() {
			return GetRuleContext<CloseContext>(0);
		}
		public PlaceholderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeholder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceholder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceholderContext placeholder() {
		PlaceholderContext _localctx = new PlaceholderContext(Context, State);
		EnterRule(_localctx, 6, RULE_placeholder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			open();
			State = 53;
			pipeline();
			State = 54;
			close();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PipelineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(GoTextTemplateParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(GoTextTemplateParser.PIPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(GoTextTemplateParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(GoTextTemplateParser.IDENT, i);
		}
		public PipelineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pipeline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipeline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PipelineContext pipeline() {
		PipelineContext _localctx = new PipelineContext(Context, State);
		EnterRule(_localctx, 8, RULE_pipeline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			path();
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PIPE) {
				{
				{
				State = 57;
				Match(PIPE);
				State = 58;
				Match(IDENT);
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(GoTextTemplateParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(GoTextTemplateParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(GoTextTemplateParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(GoTextTemplateParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(GoTextTemplateParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(GoTextTemplateParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(GoTextTemplateParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(GoTextTemplateParser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(GoTextTemplateParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(GoTextTemplateParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(GoTextTemplateParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(GoTextTemplateParser.STRING, i);
		}
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 10, RULE_path);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 64;
				Match(DOT);
				}
			}

			State = 67;
			Match(IDENT);
			}
			State = 76;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 74;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
						{
						{
						State = 69;
						Match(DOT);
						State = 70;
						Match(IDENT);
						}
						}
						break;
					case LBRACK:
						{
						{
						State = 71;
						Match(LBRACK);
						State = 72;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << IDENT))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 73;
						Match(RBRACK);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(GoTextTemplateParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(GoTextTemplateParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(GoTextTemplateParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(GoTextTemplateParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(GoTextTemplateParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(GoTextTemplateParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(GoTextTemplateParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GoTextTemplateParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(GoTextTemplateParser.NOT, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_expr);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79;
				path();
				}
				break;
			case EQ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				Match(EQ);
				State = 81;
				value();
				State = 82;
				value();
				}
				break;
			case NE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 84;
				Match(NE);
				State = 85;
				value();
				State = 86;
				value();
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 88;
				Match(LT);
				State = 89;
				value();
				State = 90;
				value();
				}
				break;
			case LE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 92;
				Match(LE);
				State = 93;
				value();
				State = 94;
				value();
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 96;
				Match(GT);
				State = 97;
				value();
				State = 98;
				value();
				}
				break;
			case GE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 100;
				Match(GE);
				State = 101;
				value();
				State = 102;
				value();
				}
				break;
			case AND:
				EnterOuterAlt(_localctx, 8);
				{
				State = 104;
				Match(AND);
				State = 105;
				expr();
				State = 106;
				expr();
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 9);
				{
				State = 108;
				Match(OR);
				State = 109;
				expr();
				State = 110;
				expr();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 112;
				Match(NOT);
				State = 113;
				expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(GoTextTemplateParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GoTextTemplateParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(GoTextTemplateParser.BOOLEAN, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 14, RULE_value);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				path();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				Match(NUMBER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 118;
				Match(STRING);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 119;
				Match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenContext[] open() {
			return GetRuleContexts<OpenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenContext open(int i) {
			return GetRuleContext<OpenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(GoTextTemplateParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseContext[] close() {
			return GetRuleContexts<CloseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseContext close(int i) {
			return GetRuleContext<CloseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(GoTextTemplateParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext[] elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			open();
			State = 123;
			Match(IF);
			State = 124;
			expr();
			State = 125;
			close();
			State = 126;
			content();
			State = 130;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 127;
					elseIfBlock();
					}
					} 
				}
				State = 132;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 133;
				elseBlock();
				}
				break;
			}
			State = 136;
			open();
			State = 137;
			Match(END);
			State = 138;
			close();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(GoTextTemplateParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(GoTextTemplateParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseContext close() {
			return GetRuleContext<CloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_elseIfBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			open();
			State = 141;
			Match(ELSE);
			State = 142;
			Match(IF);
			State = 143;
			expr();
			State = 144;
			close();
			State = 145;
			content();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(GoTextTemplateParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CloseContext close() {
			return GetRuleContext<CloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			open();
			State = 148;
			Match(ELSE);
			State = 149;
			close();
			State = 150;
			content();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenContext[] open() {
			return GetRuleContexts<OpenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenContext open(int i) {
			return GetRuleContext<OpenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(GoTextTemplateParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(GoTextTemplateParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(GoTextTemplateParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseContext[] close() {
			return GetRuleContexts<CloseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseContext close(int i) {
			return GetRuleContext<CloseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(GoTextTemplateParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public ForBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForBlockContext forBlock() {
		ForBlockContext _localctx = new ForBlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_forBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			open();
			State = 153;
			Match(FOR);
			State = 154;
			Match(IDENT);
			State = 155;
			Match(IN);
			State = 156;
			path();
			State = 157;
			close();
			State = 158;
			content();
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 159;
				elseBlock();
				}
				break;
			}
			State = 162;
			open();
			State = 163;
			Match(END);
			State = 164;
			close();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenContext[] open() {
			return GetRuleContexts<OpenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenContext open(int i) {
			return GetRuleContext<OpenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(GoTextTemplateParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeClauseContext rangeClause() {
			return GetRuleContext<RangeClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseContext[] close() {
			return GetRuleContexts<CloseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseContext close(int i) {
			return GetRuleContext<CloseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(GoTextTemplateParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public RangeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeBlockContext rangeBlock() {
		RangeBlockContext _localctx = new RangeBlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_rangeBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			open();
			State = 167;
			Match(RANGE);
			State = 168;
			rangeClause();
			State = 169;
			close();
			State = 170;
			content();
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 171;
				elseBlock();
				}
				break;
			}
			State = 174;
			open();
			State = 175;
			Match(END);
			State = 176;
			close();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarListContext varList() {
			return GetRuleContext<VarListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONEQ() { return GetToken(GoTextTemplateParser.COLONEQ, 0); }
		public RangeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeClauseContext rangeClause() {
		RangeClauseContext _localctx = new RangeClauseContext(Context, State);
		EnterRule(_localctx, 26, RULE_rangeClause);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				path();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				varList();
				State = 180;
				Match(COLONEQ);
				State = 181;
				path();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarNameContext[] varName() {
			return GetRuleContexts<VarNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarNameContext varName(int i) {
			return GetRuleContext<VarNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GoTextTemplateParser.COMMA, 0); }
		public VarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarListContext varList() {
		VarListContext _localctx = new VarListContext(Context, State);
		EnterRule(_localctx, 28, RULE_varList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			varName();
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 186;
				Match(COMMA);
				State = 187;
				varName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(GoTextTemplateParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(GoTextTemplateParser.DOLLAR, 0); }
		public VarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarNameContext varName() {
		VarNameContext _localctx = new VarNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_varName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOLLAR) {
				{
				State = 190;
				Match(DOLLAR);
				}
			}

			State = 193;
			Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(GoTextTemplateParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_TRIM() { return GetToken(GoTextTemplateParser.OPEN_TRIM, 0); }
		public OpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenContext open() {
		OpenContext _localctx = new OpenContext(Context, State);
		EnterRule(_localctx, 32, RULE_open);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = TokenStream.LA(1);
			if ( !(_la==OPEN_TRIM || _la==OPEN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(GoTextTemplateParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_TRIM() { return GetToken(GoTextTemplateParser.CLOSE_TRIM, 0); }
		public CloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTextTemplateParserVisitor<TResult> typedVisitor = visitor as IGoTextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseContext close() {
		CloseContext _localctx = new CloseContext(Context, State);
		EnterRule(_localctx, 34, RULE_close);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_la = TokenStream.LA(1);
			if ( !(_la==CLOSE_TRIM || _la==CLOSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', '\xCA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', 
		'\x3', '+', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '.', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x35', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'>', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x41', '\v', '\x6', '\x3', 
		'\a', '\x5', '\a', '\x44', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'M', '\n', '\a', '\f', '\a', '\xE', '\a', 'P', '\v', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', 'u', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '{', '\n', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x83', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\x86', '\v', '\n', '\x3', '\n', 
		'\x5', '\n', '\x89', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xA3', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\xAF', '\n', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xBA', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xBF', '\n', 
		'\x10', '\x3', '\x11', '\x5', '\x11', '\xC2', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x2', '\x2', '\x14', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '\x2', '\x5', '\x4', '\x2', '\x14', '\x15', '!', '!', 
		'\x3', '\x2', '\x3', '\x4', '\x3', '\x2', '\x6', '\a', '\x2', '\xD3', 
		'\x2', '&', '\x3', '\x2', '\x2', '\x2', '\x4', ',', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x34', '\x3', '\x2', '\x2', '\x2', '\b', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\n', ':', '\x3', '\x2', '\x2', '\x2', '\f', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 't', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x12', '|', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x16', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xBB', '\x3', '\x2', '\x2', '\x2', ' ', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xC5', '\x3', '\x2', '\x2', '\x2', '$', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '&', '\'', '\x5', '\x4', '\x3', '\x2', '\'', '(', 
		'\a', '\x2', '\x2', '\x3', '(', '\x3', '\x3', '\x2', '\x2', '\x2', ')', 
		'+', '\x5', '\x6', '\x4', '\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', 
		'+', '.', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x35', '\a', '\x5', 
		'\x2', '\x2', '\x30', '\x35', '\x5', '\b', '\x5', '\x2', '\x31', '\x35', 
		'\x5', '\x12', '\n', '\x2', '\x32', '\x35', '\x5', '\x18', '\r', '\x2', 
		'\x33', '\x35', '\x5', '\x1A', '\xE', '\x2', '\x34', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x30', '\x3', '\x2', '\x2', '\x2', '\x34', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x37', '\x5', '\"', '\x12', '\x2', '\x37', '\x38', 
		'\x5', '\n', '\x6', '\x2', '\x38', '\x39', '\x5', '$', '\x13', '\x2', 
		'\x39', '\t', '\x3', '\x2', '\x2', '\x2', ':', '?', '\x5', '\f', '\a', 
		'\x2', ';', '<', '\a', ' ', '\x2', '\x2', '<', '>', '\a', '!', '\x2', 
		'\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', 
		'\x2', '\x2', '@', '\v', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x44', '\a', '\x11', '\x2', '\x2', '\x43', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', 
		'!', '\x2', '\x2', '\x46', 'N', '\x3', '\x2', '\x2', '\x2', 'G', 'H', 
		'\a', '\x11', '\x2', '\x2', 'H', 'M', '\a', '!', '\x2', '\x2', 'I', 'J', 
		'\a', '\x12', '\x2', '\x2', 'J', 'K', '\t', '\x2', '\x2', '\x2', 'K', 
		'M', '\a', '\x13', '\x2', '\x2', 'L', 'G', '\x3', '\x2', '\x2', '\x2', 
		'L', 'I', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', '\r', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'u', '\x5', '\f', '\a', '\x2', 'R', 'S', '\a', '\x17', '\x2', 
		'\x2', 'S', 'T', '\x5', '\x10', '\t', '\x2', 'T', 'U', '\x5', '\x10', 
		'\t', '\x2', 'U', 'u', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\x18', 
		'\x2', '\x2', 'W', 'X', '\x5', '\x10', '\t', '\x2', 'X', 'Y', '\x5', '\x10', 
		'\t', '\x2', 'Y', 'u', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x19', 
		'\x2', '\x2', '[', '\\', '\x5', '\x10', '\t', '\x2', '\\', ']', '\x5', 
		'\x10', '\t', '\x2', ']', 'u', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', 
		'\x1A', '\x2', '\x2', '_', '`', '\x5', '\x10', '\t', '\x2', '`', '\x61', 
		'\x5', '\x10', '\t', '\x2', '\x61', 'u', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x63', '\a', '\x1B', '\x2', '\x2', '\x63', '\x64', '\x5', '\x10', '\t', 
		'\x2', '\x64', '\x65', '\x5', '\x10', '\t', '\x2', '\x65', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\a', '\x1C', '\x2', '\x2', 'g', 'h', 
		'\x5', '\x10', '\t', '\x2', 'h', 'i', '\x5', '\x10', '\t', '\x2', 'i', 
		'u', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\x1D', '\x2', '\x2', 
		'k', 'l', '\x5', '\xE', '\b', '\x2', 'l', 'm', '\x5', '\xE', '\b', '\x2', 
		'm', 'u', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\x1E', '\x2', '\x2', 
		'o', 'p', '\x5', '\xE', '\b', '\x2', 'p', 'q', '\x5', '\xE', '\b', '\x2', 
		'q', 'u', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\x1F', '\x2', '\x2', 
		's', 'u', '\x5', '\xE', '\b', '\x2', 't', 'Q', '\x3', '\x2', '\x2', '\x2', 
		't', 'R', '\x3', '\x2', '\x2', '\x2', 't', 'V', '\x3', '\x2', '\x2', '\x2', 
		't', 'Z', '\x3', '\x2', '\x2', '\x2', 't', '^', '\x3', '\x2', '\x2', '\x2', 
		't', '\x62', '\x3', '\x2', '\x2', '\x2', 't', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 't', 'j', '\x3', '\x2', '\x2', '\x2', 't', 'n', '\x3', '\x2', '\x2', 
		'\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'v', '{', '\x5', '\f', '\a', '\x2', 'w', '{', '\a', '\x14', 
		'\x2', '\x2', 'x', '{', '\a', '\x15', '\x2', '\x2', 'y', '{', '\a', '\x16', 
		'\x2', '\x2', 'z', 'v', '\x3', '\x2', '\x2', '\x2', 'z', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 'z', 'y', '\x3', '\x2', 
		'\x2', '\x2', '{', '\x11', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x5', 
		'\"', '\x12', '\x2', '}', '~', '\a', '\b', '\x2', '\x2', '~', '\x7F', 
		'\x5', '\xE', '\b', '\x2', '\x7F', '\x80', '\x5', '$', '\x13', '\x2', 
		'\x80', '\x84', '\x5', '\x4', '\x3', '\x2', '\x81', '\x83', '\x5', '\x14', 
		'\v', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x87', '\x89', 
		'\x5', '\x16', '\f', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8B', '\x5', '\"', '\x12', '\x2', '\x8B', '\x8C', 
		'\a', '\n', '\x2', '\x2', '\x8C', '\x8D', '\x5', '$', '\x13', '\x2', '\x8D', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x5', '\"', '\x12', 
		'\x2', '\x8F', '\x90', '\a', '\t', '\x2', '\x2', '\x90', '\x91', '\a', 
		'\b', '\x2', '\x2', '\x91', '\x92', '\x5', '\xE', '\b', '\x2', '\x92', 
		'\x93', '\x5', '$', '\x13', '\x2', '\x93', '\x94', '\x5', '\x4', '\x3', 
		'\x2', '\x94', '\x15', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x5', 
		'\"', '\x12', '\x2', '\x96', '\x97', '\a', '\t', '\x2', '\x2', '\x97', 
		'\x98', '\x5', '$', '\x13', '\x2', '\x98', '\x99', '\x5', '\x4', '\x3', 
		'\x2', '\x99', '\x17', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x5', 
		'\"', '\x12', '\x2', '\x9B', '\x9C', '\a', '\v', '\x2', '\x2', '\x9C', 
		'\x9D', '\a', '!', '\x2', '\x2', '\x9D', '\x9E', '\a', '\r', '\x2', '\x2', 
		'\x9E', '\x9F', '\x5', '\f', '\a', '\x2', '\x9F', '\xA0', '\x5', '$', 
		'\x13', '\x2', '\xA0', '\xA2', '\x5', '\x4', '\x3', '\x2', '\xA1', '\xA3', 
		'\x5', '\x16', '\f', '\x2', '\xA2', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\xA5', '\x5', '\"', '\x12', '\x2', '\xA5', '\xA6', 
		'\a', '\n', '\x2', '\x2', '\xA6', '\xA7', '\x5', '$', '\x13', '\x2', '\xA7', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x5', '\"', '\x12', 
		'\x2', '\xA9', '\xAA', '\a', '\f', '\x2', '\x2', '\xAA', '\xAB', '\x5', 
		'\x1C', '\xF', '\x2', '\xAB', '\xAC', '\x5', '$', '\x13', '\x2', '\xAC', 
		'\xAE', '\x5', '\x4', '\x3', '\x2', '\xAD', '\xAF', '\x5', '\x16', '\f', 
		'\x2', '\xAE', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB1', '\x5', '\"', '\x12', '\x2', '\xB1', '\xB2', '\a', '\n', '\x2', 
		'\x2', '\xB2', '\xB3', '\x5', '$', '\x13', '\x2', '\xB3', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xBA', '\x5', '\f', '\a', '\x2', '\xB5', 
		'\xB6', '\x5', '\x1E', '\x10', '\x2', '\xB6', '\xB7', '\a', '\xE', '\x2', 
		'\x2', '\xB7', '\xB8', '\x5', '\f', '\a', '\x2', '\xB8', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBE', '\x5', ' ', '\x11', '\x2', '\xBC', '\xBD', '\a', 
		'\xF', '\x2', '\x2', '\xBD', '\xBF', '\x5', ' ', '\x11', '\x2', '\xBE', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', '\a', 
		'\x10', '\x2', '\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC4', '\a', '!', '\x2', '\x2', '\xC4', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC6', '\t', '\x3', '\x2', '\x2', '\xC6', '#', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\t', '\x4', '\x2', '\x2', 
		'\xC8', '%', '\x3', '\x2', '\x2', '\x2', '\x11', ',', '\x34', '?', '\x43', 
		'L', 'N', 't', 'z', '\x84', '\x88', '\xA2', '\xAE', '\xB9', '\xBE', '\xC1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
