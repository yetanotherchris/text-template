//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TextTemplate/SimpleTemplateParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SimpleTemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN=1, TEXT=2, CLOSE=3, IF=4, ELSE=5, END=6, IDENT=7, DOTIDENT=8, WS=9;
	public const int
		RULE_template = 0, RULE_content = 1, RULE_part = 2, RULE_placeholder = 3, 
		RULE_ifBlock = 4;
	public static readonly string[] ruleNames = {
		"template", "content", "part", "placeholder", "ifBlock"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{{'", null, "'}}'", "'if'", "'else'", "'end'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN", "TEXT", "CLOSE", "IF", "ELSE", "END", "IDENT", "DOTIDENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleTemplateParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SimpleTemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SimpleTemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SimpleTemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class TemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SimpleTemplateParser.Eof, 0); }
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleTemplateParserListener typedListener = listener as ISimpleTemplateParserListener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleTemplateParserListener typedListener = listener as ISimpleTemplateParserListener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleTemplateParserVisitor<TResult> typedVisitor = visitor as ISimpleTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 0, RULE_template);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			content();
			State = 11;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartContext[] part() {
			return GetRuleContexts<PartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartContext part(int i) {
			return GetRuleContext<PartContext>(i);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleTemplateParserListener typedListener = listener as ISimpleTemplateParserListener;
			if (typedListener != null) typedListener.EnterContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleTemplateParserListener typedListener = listener as ISimpleTemplateParserListener;
			if (typedListener != null) typedListener.ExitContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleTemplateParserVisitor<TResult> typedVisitor = visitor as ISimpleTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(Context, State);
		EnterRule(_localctx, 2, RULE_content);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 13;
					part();
					}
					} 
				}
				State = 18;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(SimpleTemplateParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlaceholderContext placeholder() {
			return GetRuleContext<PlaceholderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public PartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleTemplateParserListener typedListener = listener as ISimpleTemplateParserListener;
			if (typedListener != null) typedListener.EnterPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleTemplateParserListener typedListener = listener as ISimpleTemplateParserListener;
			if (typedListener != null) typedListener.ExitPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleTemplateParserVisitor<TResult> typedVisitor = visitor as ISimpleTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartContext part() {
		PartContext _localctx = new PartContext(Context, State);
		EnterRule(_localctx, 4, RULE_part);
		try {
			State = 22;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 19;
				Match(TEXT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 20;
				placeholder();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 21;
				ifBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceholderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(SimpleTemplateParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(SimpleTemplateParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(SimpleTemplateParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTIDENT() { return GetToken(SimpleTemplateParser.DOTIDENT, 0); }
		public PlaceholderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeholder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleTemplateParserListener typedListener = listener as ISimpleTemplateParserListener;
			if (typedListener != null) typedListener.EnterPlaceholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleTemplateParserListener typedListener = listener as ISimpleTemplateParserListener;
			if (typedListener != null) typedListener.ExitPlaceholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleTemplateParserVisitor<TResult> typedVisitor = visitor as ISimpleTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceholder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceholderContext placeholder() {
		PlaceholderContext _localctx = new PlaceholderContext(Context, State);
		EnterRule(_localctx, 6, RULE_placeholder);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(OPEN);
			State = 25;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENT || _la==DOTIDENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 26;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(SimpleTemplateParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(SimpleTemplateParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SimpleTemplateParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(SimpleTemplateParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(SimpleTemplateParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext[] content() {
			return GetRuleContexts<ContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content(int i) {
			return GetRuleContext<ContentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SimpleTemplateParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(SimpleTemplateParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTIDENT() { return GetToken(SimpleTemplateParser.DOTIDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SimpleTemplateParser.ELSE, 0); }
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleTemplateParserListener typedListener = listener as ISimpleTemplateParserListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleTemplateParserListener typedListener = listener as ISimpleTemplateParserListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleTemplateParserVisitor<TResult> typedVisitor = visitor as ISimpleTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			Match(OPEN);
			State = 29;
			Match(IF);
			State = 30;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENT || _la==DOTIDENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 31;
			Match(CLOSE);
			State = 32;
			content();
			State = 37;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 33;
				Match(OPEN);
				State = 34;
				Match(ELSE);
				State = 35;
				Match(CLOSE);
				State = 36;
				content();
				}
				break;
			}
			State = 39;
			Match(OPEN);
			State = 40;
			Match(END);
			State = 41;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '.', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', 
		'\x3', '\x11', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x14', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x19', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '(', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x2', '\x2', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', '\x3', 
		'\x3', '\x2', '\t', '\n', '\x2', ',', '\x2', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x12', '\x3', '\x2', '\x2', '\x2', '\x6', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x1A', '\x3', '\x2', '\x2', '\x2', '\n', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x5', '\x4', '\x3', '\x2', '\r', 
		'\xE', '\a', '\x2', '\x2', '\x3', '\xE', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\x11', '\x5', '\x6', '\x4', '\x2', '\x10', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x11', '\x14', '\x3', '\x2', '\x2', '\x2', '\x12', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '\x5', '\x3', '\x2', '\x2', '\x2', '\x14', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '\x19', '\a', '\x4', '\x2', '\x2', '\x16', '\x19', 
		'\x5', '\b', '\x5', '\x2', '\x17', '\x19', '\x5', '\n', '\x6', '\x2', 
		'\x18', '\x15', '\x3', '\x2', '\x2', '\x2', '\x18', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', '\x3', '\x2', '\x2', 
		'\x1B', '\x1C', '\t', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\x5', 
		'\x2', '\x2', '\x1D', '\t', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\a', '\x3', '\x2', '\x2', '\x1F', ' ', '\a', '\x6', '\x2', '\x2', ' ', 
		'!', '\t', '\x2', '\x2', '\x2', '!', '\"', '\a', '\x5', '\x2', '\x2', 
		'\"', '\'', '\x5', '\x4', '\x3', '\x2', '#', '$', '\a', '\x3', '\x2', 
		'\x2', '$', '%', '\a', '\a', '\x2', '\x2', '%', '&', '\a', '\x5', '\x2', 
		'\x2', '&', '(', '\x5', '\x4', '\x3', '\x2', '\'', '#', '\x3', '\x2', 
		'\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', 
		'\x2', '\x2', '\x2', ')', '*', '\a', '\x3', '\x2', '\x2', '*', '+', '\a', 
		'\b', '\x2', '\x2', '+', ',', '\a', '\x5', '\x2', '\x2', ',', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x5', '\x12', '\x18', '\'',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
