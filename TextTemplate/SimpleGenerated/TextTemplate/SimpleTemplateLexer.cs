//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TextTemplate/SimpleTemplateLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SimpleTemplateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN=1, TEXT=2, IDENT=3, CLOSE=4, WS=5;
	public const int
		EXPR=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "EXPR"
	};

	public static readonly string[] ruleNames = {
		"OPEN", "TEXT", "IDENT", "CLOSE", "WS"
	};


	public SimpleTemplateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SimpleTemplateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{{'", null, null, "'}}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN", "TEXT", "IDENT", "CLOSE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleTemplateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleTemplateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,5,47,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,1,0,1,0,
		1,0,1,0,1,1,4,1,19,8,1,11,1,12,1,20,1,1,1,1,4,1,25,8,1,11,1,12,1,26,1,
		2,1,2,5,2,31,8,2,10,2,12,2,34,9,2,1,3,1,3,1,3,1,3,1,3,1,4,4,4,42,8,4,11,
		4,12,4,43,1,4,1,4,0,0,5,2,1,4,2,6,3,8,4,10,5,2,0,1,4,1,0,123,123,3,0,65,
		90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,50,0,
		2,1,0,0,0,0,4,1,0,0,0,1,6,1,0,0,0,1,8,1,0,0,0,1,10,1,0,0,0,2,12,1,0,0,
		0,4,24,1,0,0,0,6,28,1,0,0,0,8,35,1,0,0,0,10,41,1,0,0,0,12,13,5,123,0,0,
		13,14,5,123,0,0,14,15,1,0,0,0,15,16,6,0,0,0,16,3,1,0,0,0,17,19,8,0,0,0,
		18,17,1,0,0,0,19,20,1,0,0,0,20,18,1,0,0,0,20,21,1,0,0,0,21,25,1,0,0,0,
		22,23,5,123,0,0,23,25,8,0,0,0,24,18,1,0,0,0,24,22,1,0,0,0,25,26,1,0,0,
		0,26,24,1,0,0,0,26,27,1,0,0,0,27,5,1,0,0,0,28,32,7,1,0,0,29,31,7,2,0,0,
		30,29,1,0,0,0,31,34,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,7,1,0,0,0,34,
		32,1,0,0,0,35,36,5,125,0,0,36,37,5,125,0,0,37,38,1,0,0,0,38,39,6,3,1,0,
		39,9,1,0,0,0,40,42,7,3,0,0,41,40,1,0,0,0,42,43,1,0,0,0,43,41,1,0,0,0,43,
		44,1,0,0,0,44,45,1,0,0,0,45,46,6,4,2,0,46,11,1,0,0,0,7,0,1,20,24,26,32,
		43,3,5,1,0,4,0,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
