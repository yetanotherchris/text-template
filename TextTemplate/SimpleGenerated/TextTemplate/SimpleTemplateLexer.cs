//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TextTemplate/SimpleTemplateLexer.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SimpleTemplateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN=1, TEXT=2, CLOSE=3, IF=4, ELSE=5, END=6, IDENT=7, DOTIDENT=8, WS=9;
	public const int
		EXPR=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "EXPR"
	};

	public static readonly string[] ruleNames = {
		"OPEN", "TEXT", "CLOSE", "IF", "ELSE", "END", "IDENT", "DOTIDENT", "WS"
	};


	public SimpleTemplateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SimpleTemplateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{{'", null, "'}}'", "'if'", "'else'", "'end'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN", "TEXT", "CLOSE", "IF", "ELSE", "END", "IDENT", "DOTIDENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleTemplateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SimpleTemplateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\v', '\x44', '\b', '\x1', '\b', '\x1', '\x4', '\x2', 
		'\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', 
		'\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', 
		'\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '\x1F', '\n', 
		'\x3', '\r', '\x3', '\xE', '\x3', ' ', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\a', '\b', '\x36', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'\x39', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x6', '\n', '?', '\n', '\n', '\r', '\n', '\xE', '\n', '@', '\x3', '\n', 
		'\x3', '\n', '\x2', '\x2', '\v', '\x4', '\x3', '\x6', '\x4', '\b', '\x5', 
		'\n', '\x6', '\f', '\a', '\xE', '\b', '\x10', '\t', '\x12', '\n', '\x14', 
		'\v', '\x4', '\x2', '\x3', '\x6', '\x3', '\x2', '}', '}', '\x5', '\x2', 
		'\x43', '\\', '\x61', '\x61', '\x63', '|', '\x6', '\x2', '\x32', ';', 
		'\x43', '\\', '\x61', '\x61', '\x63', '|', '\x5', '\x2', '\v', '\f', '\xF', 
		'\xF', '\"', '\"', '\x2', '\x46', '\x2', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x6', '\x3', '\x2', '\x2', '\x2', '\x3', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\n', '\x3', '\x2', '\x2', '\x2', '\x3', '\f', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\xE', '\x3', '\x2', '\x2', '\x2', '\x3', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\x14', '\x3', '\x2', '\x2', '\x2', '\x4', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x1E', '\x3', '\x2', '\x2', '\x2', '\b', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\'', '\x3', '\x2', '\x2', '\x2', '\f', '*', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '/', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x12', ':', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '>', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\a', 
		'}', '\x2', '\x2', '\x17', '\x18', '\a', '}', '\x2', '\x2', '\x18', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\b', '\x2', '\x2', '\x2', 
		'\x1A', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1F', '\n', '\x2', 
		'\x2', '\x2', '\x1C', '\x1D', '\a', '}', '\x2', '\x2', '\x1D', '\x1F', 
		'\n', '\x2', '\x2', '\x2', '\x1E', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', 
		'\x2', '\x2', '\x2', '!', '\a', '\x3', '\x2', '\x2', '\x2', '\"', '#', 
		'\a', '\x7F', '\x2', '\x2', '#', '$', '\a', '\x7F', '\x2', '\x2', '$', 
		'%', '\x3', '\x2', '\x2', '\x2', '%', '&', '\b', '\x4', '\x3', '\x2', 
		'&', '\t', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', 'k', '\x2', '\x2', 
		'(', ')', '\a', 'h', '\x2', '\x2', ')', '\v', '\x3', '\x2', '\x2', '\x2', 
		'*', '+', '\a', 'g', '\x2', '\x2', '+', ',', '\a', 'n', '\x2', '\x2', 
		',', '-', '\a', 'u', '\x2', '\x2', '-', '.', '\a', 'g', '\x2', '\x2', 
		'.', '\r', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', 'g', '\x2', 
		'\x2', '\x30', '\x31', '\a', 'p', '\x2', '\x2', '\x31', '\x32', '\a', 
		'\x66', '\x2', '\x2', '\x32', '\xF', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x37', '\t', '\x3', '\x2', '\x2', '\x34', '\x36', '\t', '\x4', '\x2', 
		'\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x38', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\x30', 
		'\x2', '\x2', ';', '<', '\x5', '\x10', '\b', '\x2', '<', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '=', '?', '\t', '\x5', '\x2', '\x2', '>', '=', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\b', '\n', '\x4', 
		'\x2', '\x43', '\x15', '\x3', '\x2', '\x2', '\x2', '\b', '\x2', '\x3', 
		'\x1E', ' ', '\x37', '@', '\x5', '\a', '\x3', '\x2', '\x6', '\x2', '\x2', 
		'\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
