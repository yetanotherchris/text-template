//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GoTemplate.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GoTemplateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, LEFT_DELIM=16, 
		RIGHT_DELIM=17, STRING=18, NUMBER=19, BOOLEAN=20, IDENTIFIER=21, TEXT=22, 
		WS=23, COMMENT=24;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "LEFT_DELIM", "RIGHT_DELIM", 
		"STRING", "NUMBER", "DECIMAL", "HEXADECIMAL", "OCTAL", "FLOAT", "BOOLEAN", 
		"IDENTIFIER", "TEXT", "WS", "COMMENT"
	};


	public GoTemplateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GoTemplateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'end'", "'range'", "'with'", "'define'", "'template'", 
		"'block'", "'else'", "'|'", "'.'", "'('", "','", "')'", "'$'", "'nil'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "LEFT_DELIM", "RIGHT_DELIM", "STRING", "NUMBER", 
		"BOOLEAN", "IDENTIFIER", "TEXT", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GoTemplate.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GoTemplateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,24,284,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,
		0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
		6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,3,15,
		124,8,15,1,16,1,16,1,16,1,16,1,16,3,16,131,8,16,1,17,1,17,1,17,1,17,5,
		17,137,8,17,10,17,12,17,140,9,17,1,17,1,17,1,17,5,17,145,8,17,10,17,12,
		17,148,9,17,1,17,1,17,1,17,1,17,1,17,5,17,155,8,17,10,17,12,17,158,9,17,
		1,17,3,17,161,8,17,1,18,1,18,1,18,1,18,3,18,167,8,18,1,19,4,19,170,8,19,
		11,19,12,19,171,1,20,1,20,1,20,4,20,177,8,20,11,20,12,20,178,1,21,1,21,
		4,21,183,8,21,11,21,12,21,184,1,22,4,22,188,8,22,11,22,12,22,189,1,22,
		1,22,4,22,194,8,22,11,22,12,22,195,1,22,4,22,199,8,22,11,22,12,22,200,
		1,22,1,22,4,22,205,8,22,11,22,12,22,206,3,22,209,8,22,1,22,1,22,3,22,213,
		8,22,1,22,4,22,216,8,22,11,22,12,22,217,1,22,1,22,4,22,222,8,22,11,22,
		12,22,223,1,22,1,22,3,22,228,8,22,1,22,4,22,231,8,22,11,22,12,22,232,3,
		22,235,8,22,3,22,237,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		3,23,248,8,23,1,24,1,24,5,24,252,8,24,10,24,12,24,255,9,24,1,25,1,25,1,
		25,4,25,260,8,25,11,25,12,25,261,1,26,4,26,265,8,26,11,26,12,26,266,1,
		26,1,26,1,27,1,27,1,27,1,27,5,27,275,8,27,10,27,12,27,278,9,27,1,27,1,
		27,1,27,1,27,1,27,1,276,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
		10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,0,41,0,43,
		0,45,0,47,20,49,21,51,22,53,23,55,24,1,0,13,3,0,10,10,13,13,34,34,1,0,
		96,96,3,0,10,10,13,13,39,39,1,0,48,57,2,0,88,88,120,120,3,0,48,57,65,70,
		97,102,1,0,48,55,2,0,69,69,101,101,2,0,43,43,45,45,3,0,65,90,95,95,97,
		122,4,0,48,57,65,90,95,95,97,122,2,0,39,39,123,123,3,0,9,10,13,13,32,32,
		313,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
		0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,60,1,0,0,0,5,64,1,0,0,0,7,70,
		1,0,0,0,9,75,1,0,0,0,11,82,1,0,0,0,13,91,1,0,0,0,15,97,1,0,0,0,17,102,
		1,0,0,0,19,104,1,0,0,0,21,106,1,0,0,0,23,108,1,0,0,0,25,110,1,0,0,0,27,
		112,1,0,0,0,29,114,1,0,0,0,31,123,1,0,0,0,33,130,1,0,0,0,35,160,1,0,0,
		0,37,166,1,0,0,0,39,169,1,0,0,0,41,173,1,0,0,0,43,180,1,0,0,0,45,236,1,
		0,0,0,47,247,1,0,0,0,49,249,1,0,0,0,51,259,1,0,0,0,53,264,1,0,0,0,55,270,
		1,0,0,0,57,58,5,105,0,0,58,59,5,102,0,0,59,2,1,0,0,0,60,61,5,101,0,0,61,
		62,5,110,0,0,62,63,5,100,0,0,63,4,1,0,0,0,64,65,5,114,0,0,65,66,5,97,0,
		0,66,67,5,110,0,0,67,68,5,103,0,0,68,69,5,101,0,0,69,6,1,0,0,0,70,71,5,
		119,0,0,71,72,5,105,0,0,72,73,5,116,0,0,73,74,5,104,0,0,74,8,1,0,0,0,75,
		76,5,100,0,0,76,77,5,101,0,0,77,78,5,102,0,0,78,79,5,105,0,0,79,80,5,110,
		0,0,80,81,5,101,0,0,81,10,1,0,0,0,82,83,5,116,0,0,83,84,5,101,0,0,84,85,
		5,109,0,0,85,86,5,112,0,0,86,87,5,108,0,0,87,88,5,97,0,0,88,89,5,116,0,
		0,89,90,5,101,0,0,90,12,1,0,0,0,91,92,5,98,0,0,92,93,5,108,0,0,93,94,5,
		111,0,0,94,95,5,99,0,0,95,96,5,107,0,0,96,14,1,0,0,0,97,98,5,101,0,0,98,
		99,5,108,0,0,99,100,5,115,0,0,100,101,5,101,0,0,101,16,1,0,0,0,102,103,
		5,124,0,0,103,18,1,0,0,0,104,105,5,46,0,0,105,20,1,0,0,0,106,107,5,40,
		0,0,107,22,1,0,0,0,108,109,5,44,0,0,109,24,1,0,0,0,110,111,5,41,0,0,111,
		26,1,0,0,0,112,113,5,36,0,0,113,28,1,0,0,0,114,115,5,110,0,0,115,116,5,
		105,0,0,116,117,5,108,0,0,117,30,1,0,0,0,118,119,5,123,0,0,119,120,5,123,
		0,0,120,124,5,45,0,0,121,122,5,123,0,0,122,124,5,123,0,0,123,118,1,0,0,
		0,123,121,1,0,0,0,124,32,1,0,0,0,125,126,5,45,0,0,126,127,5,125,0,0,127,
		131,5,125,0,0,128,129,5,125,0,0,129,131,5,125,0,0,130,125,1,0,0,0,130,
		128,1,0,0,0,131,34,1,0,0,0,132,138,5,34,0,0,133,137,8,0,0,0,134,135,5,
		92,0,0,135,137,5,34,0,0,136,133,1,0,0,0,136,134,1,0,0,0,137,140,1,0,0,
		0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,
		161,5,34,0,0,142,146,5,96,0,0,143,145,8,1,0,0,144,143,1,0,0,0,145,148,
		1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,148,146,1,0,0,
		0,149,161,5,96,0,0,150,156,5,39,0,0,151,152,5,92,0,0,152,155,9,0,0,0,153,
		155,8,2,0,0,154,151,1,0,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,
		0,0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,161,5,39,0,0,
		160,132,1,0,0,0,160,142,1,0,0,0,160,150,1,0,0,0,161,36,1,0,0,0,162,167,
		3,39,19,0,163,167,3,41,20,0,164,167,3,43,21,0,165,167,3,45,22,0,166,162,
		1,0,0,0,166,163,1,0,0,0,166,164,1,0,0,0,166,165,1,0,0,0,167,38,1,0,0,0,
		168,170,7,3,0,0,169,168,1,0,0,0,170,171,1,0,0,0,171,169,1,0,0,0,171,172,
		1,0,0,0,172,40,1,0,0,0,173,174,5,48,0,0,174,176,7,4,0,0,175,177,7,5,0,
		0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,
		42,1,0,0,0,180,182,5,48,0,0,181,183,7,6,0,0,182,181,1,0,0,0,183,184,1,
		0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,44,1,0,0,0,186,188,7,3,0,0,187,
		186,1,0,0,0,188,189,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,191,1,
		0,0,0,191,193,5,46,0,0,192,194,7,3,0,0,193,192,1,0,0,0,194,195,1,0,0,0,
		195,193,1,0,0,0,195,196,1,0,0,0,196,237,1,0,0,0,197,199,7,3,0,0,198,197,
		1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,208,1,0,0,
		0,202,204,5,46,0,0,203,205,7,3,0,0,204,203,1,0,0,0,205,206,1,0,0,0,206,
		204,1,0,0,0,206,207,1,0,0,0,207,209,1,0,0,0,208,202,1,0,0,0,208,209,1,
		0,0,0,209,210,1,0,0,0,210,212,7,7,0,0,211,213,7,8,0,0,212,211,1,0,0,0,
		212,213,1,0,0,0,213,215,1,0,0,0,214,216,7,3,0,0,215,214,1,0,0,0,216,217,
		1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,237,1,0,0,0,219,221,5,46,0,
		0,220,222,7,3,0,0,221,220,1,0,0,0,222,223,1,0,0,0,223,221,1,0,0,0,223,
		224,1,0,0,0,224,234,1,0,0,0,225,227,7,7,0,0,226,228,7,8,0,0,227,226,1,
		0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,231,7,3,0,0,230,229,1,0,0,0,
		231,232,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,225,
		1,0,0,0,234,235,1,0,0,0,235,237,1,0,0,0,236,187,1,0,0,0,236,198,1,0,0,
		0,236,219,1,0,0,0,237,46,1,0,0,0,238,239,5,116,0,0,239,240,5,114,0,0,240,
		241,5,117,0,0,241,248,5,101,0,0,242,243,5,102,0,0,243,244,5,97,0,0,244,
		245,5,108,0,0,245,246,5,115,0,0,246,248,5,101,0,0,247,238,1,0,0,0,247,
		242,1,0,0,0,248,48,1,0,0,0,249,253,7,9,0,0,250,252,7,10,0,0,251,250,1,
		0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,50,1,0,0,0,255,
		253,1,0,0,0,256,260,8,11,0,0,257,258,5,123,0,0,258,260,8,11,0,0,259,256,
		1,0,0,0,259,257,1,0,0,0,260,261,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,
		0,262,52,1,0,0,0,263,265,7,12,0,0,264,263,1,0,0,0,265,266,1,0,0,0,266,
		264,1,0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,269,6,26,0,0,269,54,1,
		0,0,0,270,271,5,47,0,0,271,272,5,42,0,0,272,276,1,0,0,0,273,275,9,0,0,
		0,274,273,1,0,0,0,275,278,1,0,0,0,276,277,1,0,0,0,276,274,1,0,0,0,277,
		279,1,0,0,0,278,276,1,0,0,0,279,280,5,42,0,0,280,281,5,47,0,0,281,282,
		1,0,0,0,282,283,6,27,0,0,283,56,1,0,0,0,31,0,123,130,136,138,146,154,156,
		160,166,171,178,184,189,195,200,206,208,212,217,223,227,232,234,236,247,
		253,259,261,266,276,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
