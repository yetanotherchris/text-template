//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TextTemplate/GoTemplate.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GoTemplateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, LEFT_DELIM=16, 
		RIGHT_DELIM=17, STRING=18, NUMBER=19, BOOLEAN=20, IDENTIFIER=21, TEXT=22, 
		WS=23, COMMENT=24;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "LEFT_DELIM", "RIGHT_DELIM", 
		"STRING", "NUMBER", "DECIMAL", "HEXADECIMAL", "OCTAL", "FLOAT", "BOOLEAN", 
		"IDENTIFIER", "TEXT", "WS", "COMMENT"
	};


	public GoTemplateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GoTemplateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'end'", "'range'", "'with'", "'define'", "'template'", 
		"'block'", "'else'", "'|'", "'.'", "'('", "','", "')'", "'$'", "'nil'", 
		"'{{'", "'}}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "LEFT_DELIM", "RIGHT_DELIM", "STRING", "NUMBER", 
		"BOOLEAN", "IDENTIFIER", "TEXT", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GoTemplate.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GoTemplateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,24,276,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,
		0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
		6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,
		1,17,1,17,1,17,1,17,5,17,129,8,17,10,17,12,17,132,9,17,1,17,1,17,1,17,
		5,17,137,8,17,10,17,12,17,140,9,17,1,17,1,17,1,17,1,17,1,17,5,17,147,8,
		17,10,17,12,17,150,9,17,1,17,3,17,153,8,17,1,18,1,18,1,18,1,18,3,18,159,
		8,18,1,19,4,19,162,8,19,11,19,12,19,163,1,20,1,20,1,20,4,20,169,8,20,11,
		20,12,20,170,1,21,1,21,4,21,175,8,21,11,21,12,21,176,1,22,4,22,180,8,22,
		11,22,12,22,181,1,22,1,22,4,22,186,8,22,11,22,12,22,187,1,22,4,22,191,
		8,22,11,22,12,22,192,1,22,1,22,4,22,197,8,22,11,22,12,22,198,3,22,201,
		8,22,1,22,1,22,3,22,205,8,22,1,22,4,22,208,8,22,11,22,12,22,209,1,22,1,
		22,4,22,214,8,22,11,22,12,22,215,1,22,1,22,3,22,220,8,22,1,22,4,22,223,
		8,22,11,22,12,22,224,3,22,227,8,22,3,22,229,8,22,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,3,23,240,8,23,1,24,1,24,5,24,244,8,24,10,24,12,
		24,247,9,24,1,25,1,25,1,25,4,25,252,8,25,11,25,12,25,253,1,26,4,26,257,
		8,26,11,26,12,26,258,1,26,1,26,1,27,1,27,1,27,1,27,5,27,267,8,27,10,27,
		12,27,270,9,27,1,27,1,27,1,27,1,27,1,27,1,268,0,28,1,1,3,2,5,3,7,4,9,5,
		11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
		18,37,19,39,0,41,0,43,0,45,0,47,20,49,21,51,22,53,23,55,24,1,0,13,3,0,
		10,10,13,13,34,34,1,0,96,96,3,0,10,10,13,13,39,39,1,0,48,57,2,0,88,88,
		120,120,3,0,48,57,65,70,97,102,1,0,48,55,2,0,69,69,101,101,2,0,43,43,45,
		45,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,39,39,123,123,
		3,0,9,10,13,13,32,32,303,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
		0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,60,1,0,0,
		0,5,64,1,0,0,0,7,70,1,0,0,0,9,75,1,0,0,0,11,82,1,0,0,0,13,91,1,0,0,0,15,
		97,1,0,0,0,17,102,1,0,0,0,19,104,1,0,0,0,21,106,1,0,0,0,23,108,1,0,0,0,
		25,110,1,0,0,0,27,112,1,0,0,0,29,114,1,0,0,0,31,118,1,0,0,0,33,121,1,0,
		0,0,35,152,1,0,0,0,37,158,1,0,0,0,39,161,1,0,0,0,41,165,1,0,0,0,43,172,
		1,0,0,0,45,228,1,0,0,0,47,239,1,0,0,0,49,241,1,0,0,0,51,251,1,0,0,0,53,
		256,1,0,0,0,55,262,1,0,0,0,57,58,5,105,0,0,58,59,5,102,0,0,59,2,1,0,0,
		0,60,61,5,101,0,0,61,62,5,110,0,0,62,63,5,100,0,0,63,4,1,0,0,0,64,65,5,
		114,0,0,65,66,5,97,0,0,66,67,5,110,0,0,67,68,5,103,0,0,68,69,5,101,0,0,
		69,6,1,0,0,0,70,71,5,119,0,0,71,72,5,105,0,0,72,73,5,116,0,0,73,74,5,104,
		0,0,74,8,1,0,0,0,75,76,5,100,0,0,76,77,5,101,0,0,77,78,5,102,0,0,78,79,
		5,105,0,0,79,80,5,110,0,0,80,81,5,101,0,0,81,10,1,0,0,0,82,83,5,116,0,
		0,83,84,5,101,0,0,84,85,5,109,0,0,85,86,5,112,0,0,86,87,5,108,0,0,87,88,
		5,97,0,0,88,89,5,116,0,0,89,90,5,101,0,0,90,12,1,0,0,0,91,92,5,98,0,0,
		92,93,5,108,0,0,93,94,5,111,0,0,94,95,5,99,0,0,95,96,5,107,0,0,96,14,1,
		0,0,0,97,98,5,101,0,0,98,99,5,108,0,0,99,100,5,115,0,0,100,101,5,101,0,
		0,101,16,1,0,0,0,102,103,5,124,0,0,103,18,1,0,0,0,104,105,5,46,0,0,105,
		20,1,0,0,0,106,107,5,40,0,0,107,22,1,0,0,0,108,109,5,44,0,0,109,24,1,0,
		0,0,110,111,5,41,0,0,111,26,1,0,0,0,112,113,5,36,0,0,113,28,1,0,0,0,114,
		115,5,110,0,0,115,116,5,105,0,0,116,117,5,108,0,0,117,30,1,0,0,0,118,119,
		5,123,0,0,119,120,5,123,0,0,120,32,1,0,0,0,121,122,5,125,0,0,122,123,5,
		125,0,0,123,34,1,0,0,0,124,130,5,34,0,0,125,129,8,0,0,0,126,127,5,92,0,
		0,127,129,5,34,0,0,128,125,1,0,0,0,128,126,1,0,0,0,129,132,1,0,0,0,130,
		128,1,0,0,0,130,131,1,0,0,0,131,133,1,0,0,0,132,130,1,0,0,0,133,153,5,
		34,0,0,134,138,5,96,0,0,135,137,8,1,0,0,136,135,1,0,0,0,137,140,1,0,0,
		0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,
		153,5,96,0,0,142,148,5,39,0,0,143,144,5,92,0,0,144,147,9,0,0,0,145,147,
		8,2,0,0,146,143,1,0,0,0,146,145,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,
		0,148,149,1,0,0,0,149,151,1,0,0,0,150,148,1,0,0,0,151,153,5,39,0,0,152,
		124,1,0,0,0,152,134,1,0,0,0,152,142,1,0,0,0,153,36,1,0,0,0,154,159,3,39,
		19,0,155,159,3,41,20,0,156,159,3,43,21,0,157,159,3,45,22,0,158,154,1,0,
		0,0,158,155,1,0,0,0,158,156,1,0,0,0,158,157,1,0,0,0,159,38,1,0,0,0,160,
		162,7,3,0,0,161,160,1,0,0,0,162,163,1,0,0,0,163,161,1,0,0,0,163,164,1,
		0,0,0,164,40,1,0,0,0,165,166,5,48,0,0,166,168,7,4,0,0,167,169,7,5,0,0,
		168,167,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,42,
		1,0,0,0,172,174,5,48,0,0,173,175,7,6,0,0,174,173,1,0,0,0,175,176,1,0,0,
		0,176,174,1,0,0,0,176,177,1,0,0,0,177,44,1,0,0,0,178,180,7,3,0,0,179,178,
		1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,183,1,0,0,
		0,183,185,5,46,0,0,184,186,7,3,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,
		185,1,0,0,0,187,188,1,0,0,0,188,229,1,0,0,0,189,191,7,3,0,0,190,189,1,
		0,0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,200,1,0,0,0,
		194,196,5,46,0,0,195,197,7,3,0,0,196,195,1,0,0,0,197,198,1,0,0,0,198,196,
		1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,194,1,0,0,0,200,201,1,0,0,
		0,201,202,1,0,0,0,202,204,7,7,0,0,203,205,7,8,0,0,204,203,1,0,0,0,204,
		205,1,0,0,0,205,207,1,0,0,0,206,208,7,3,0,0,207,206,1,0,0,0,208,209,1,
		0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,229,1,0,0,0,211,213,5,46,0,0,
		212,214,7,3,0,0,213,212,1,0,0,0,214,215,1,0,0,0,215,213,1,0,0,0,215,216,
		1,0,0,0,216,226,1,0,0,0,217,219,7,7,0,0,218,220,7,8,0,0,219,218,1,0,0,
		0,219,220,1,0,0,0,220,222,1,0,0,0,221,223,7,3,0,0,222,221,1,0,0,0,223,
		224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,217,1,
		0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,179,1,0,0,0,228,190,1,0,0,0,
		228,211,1,0,0,0,229,46,1,0,0,0,230,231,5,116,0,0,231,232,5,114,0,0,232,
		233,5,117,0,0,233,240,5,101,0,0,234,235,5,102,0,0,235,236,5,97,0,0,236,
		237,5,108,0,0,237,238,5,115,0,0,238,240,5,101,0,0,239,230,1,0,0,0,239,
		234,1,0,0,0,240,48,1,0,0,0,241,245,7,9,0,0,242,244,7,10,0,0,243,242,1,
		0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,50,1,0,0,0,247,
		245,1,0,0,0,248,252,8,11,0,0,249,250,5,123,0,0,250,252,8,11,0,0,251,248,
		1,0,0,0,251,249,1,0,0,0,252,253,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,
		0,254,52,1,0,0,0,255,257,7,12,0,0,256,255,1,0,0,0,257,258,1,0,0,0,258,
		256,1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,261,6,26,0,0,261,54,1,
		0,0,0,262,263,5,47,0,0,263,264,5,42,0,0,264,268,1,0,0,0,265,267,9,0,0,
		0,266,265,1,0,0,0,267,270,1,0,0,0,268,269,1,0,0,0,268,266,1,0,0,0,269,
		271,1,0,0,0,270,268,1,0,0,0,271,272,5,42,0,0,272,273,5,47,0,0,273,274,
		1,0,0,0,274,275,6,27,0,0,275,56,1,0,0,0,29,0,128,130,138,146,148,152,158,
		163,170,176,181,187,192,198,200,204,209,215,219,224,226,228,239,245,251,
		253,258,268,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
