//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GoTemplate.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GoTemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, LEFT_DELIM=16, 
		RIGHT_DELIM=17, STRING=18, NUMBER=19, BOOLEAN=20, IDENTIFIER=21, TEXT=22, 
		WS=23, COMMENT=24;
	public const int
		RULE_template = 0, RULE_element = 1, RULE_action = 2, RULE_elseAction = 3, 
		RULE_pipeline = 4, RULE_command = 5, RULE_operand = 6, RULE_primary = 7, 
		RULE_chainedField = 8, RULE_variable = 9, RULE_functionCall = 10, RULE_literal = 11;
	public static readonly string[] ruleNames = {
		"template", "element", "action", "elseAction", "pipeline", "command", 
		"operand", "primary", "chainedField", "variable", "functionCall", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'end'", "'range'", "'with'", "'define'", "'template'", 
		"'block'", "'else'", "'|'", "'.'", "'('", "','", "')'", "'$'", "'nil'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "LEFT_DELIM", "RIGHT_DELIM", "STRING", "NUMBER", 
		"BOOLEAN", "IDENTIFIER", "TEXT", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GoTemplate.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GoTemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GoTemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GoTemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTemplateVisitor<TResult> typedVisitor = visitor as IGoTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 0, RULE_template);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 24;
					element();
					}
					} 
				}
				State = 29;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(GoTemplateParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTemplateVisitor<TResult> typedVisitor = visitor as IGoTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_element);
		try {
			State = 32;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 30;
				Match(TEXT);
				}
				break;
			case LEFT_DELIM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 31;
				action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFT_DELIM() { return GetTokens(GoTemplateParser.LEFT_DELIM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_DELIM(int i) {
			return GetToken(GoTemplateParser.LEFT_DELIM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PipelineContext pipeline() {
			return GetRuleContext<PipelineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHT_DELIM() { return GetTokens(GoTemplateParser.RIGHT_DELIM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_DELIM(int i) {
			return GetToken(GoTemplateParser.RIGHT_DELIM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContext template() {
			return GetRuleContext<TemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseActionContext elseAction() {
			return GetRuleContext<ElseActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GoTemplateParser.STRING, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTemplateVisitor<TResult> typedVisitor = visitor as IGoTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 4, RULE_action);
		int _la;
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				Match(LEFT_DELIM);
				State = 35;
				pipeline();
				State = 36;
				Match(RIGHT_DELIM);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38;
				Match(LEFT_DELIM);
				State = 39;
				Match(T__0);
				State = 40;
				pipeline();
				State = 41;
				Match(RIGHT_DELIM);
				State = 42;
				template();
				State = 44;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 43;
					elseAction();
					}
					break;
				}
				State = 46;
				Match(LEFT_DELIM);
				State = 47;
				Match(T__1);
				State = 48;
				Match(RIGHT_DELIM);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				Match(LEFT_DELIM);
				State = 51;
				Match(T__2);
				State = 52;
				pipeline();
				State = 53;
				Match(RIGHT_DELIM);
				State = 54;
				template();
				State = 56;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 55;
					elseAction();
					}
					break;
				}
				State = 58;
				Match(LEFT_DELIM);
				State = 59;
				Match(T__1);
				State = 60;
				Match(RIGHT_DELIM);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 62;
				Match(LEFT_DELIM);
				State = 63;
				Match(T__3);
				State = 64;
				pipeline();
				State = 65;
				Match(RIGHT_DELIM);
				State = 66;
				template();
				State = 68;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 67;
					elseAction();
					}
					break;
				}
				State = 70;
				Match(LEFT_DELIM);
				State = 71;
				Match(T__1);
				State = 72;
				Match(RIGHT_DELIM);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 74;
				Match(LEFT_DELIM);
				State = 75;
				Match(T__4);
				State = 76;
				Match(STRING);
				State = 77;
				Match(RIGHT_DELIM);
				State = 78;
				template();
				State = 79;
				Match(LEFT_DELIM);
				State = 80;
				Match(T__1);
				State = 81;
				Match(RIGHT_DELIM);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 83;
				Match(LEFT_DELIM);
				State = 84;
				Match(T__5);
				State = 85;
				Match(STRING);
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3984384L) != 0)) {
					{
					State = 86;
					pipeline();
					}
				}

				State = 89;
				Match(RIGHT_DELIM);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 90;
				Match(LEFT_DELIM);
				State = 91;
				Match(T__6);
				State = 92;
				Match(STRING);
				State = 93;
				pipeline();
				State = 94;
				Match(RIGHT_DELIM);
				State = 95;
				template();
				State = 96;
				Match(LEFT_DELIM);
				State = 97;
				Match(T__1);
				State = 98;
				Match(RIGHT_DELIM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_DELIM() { return GetToken(GoTemplateParser.LEFT_DELIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_DELIM() { return GetToken(GoTemplateParser.RIGHT_DELIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContext template() {
			return GetRuleContext<TemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PipelineContext pipeline() {
			return GetRuleContext<PipelineContext>(0);
		}
		public ElseActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.EnterElseAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.ExitElseAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTemplateVisitor<TResult> typedVisitor = visitor as IGoTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseActionContext elseAction() {
		ElseActionContext _localctx = new ElseActionContext(Context, State);
		EnterRule(_localctx, 6, RULE_elseAction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(LEFT_DELIM);
			State = 103;
			Match(T__7);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3984384L) != 0)) {
				{
				State = 104;
				pipeline();
				}
			}

			State = 107;
			Match(RIGHT_DELIM);
			State = 108;
			template();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PipelineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public PipelineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pipeline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.EnterPipeline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.ExitPipeline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTemplateVisitor<TResult> typedVisitor = visitor as IGoTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipeline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PipelineContext pipeline() {
		PipelineContext _localctx = new PipelineContext(Context, State);
		EnterRule(_localctx, 8, RULE_pipeline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			command();
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 111;
				Match(T__8);
				State = 112;
				command();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoTemplateParser.IDENTIFIER, 0); }
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTemplateVisitor<TResult> typedVisitor = visitor as IGoTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_command);
		int _la;
		try {
			int _alt;
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 118;
					operand();
					}
					}
					State = 121;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3984384L) != 0) );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 123;
						operand();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 126;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 128;
				_la = TokenStream.LA(1);
				if ( !(_la==T__9 || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3984384L) != 0)) {
					{
					{
					State = 129;
					operand();
					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GoTemplateParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GoTemplateParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PipelineContext[] pipeline() {
			return GetRuleContexts<PipelineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PipelineContext pipeline(int i) {
			return GetRuleContext<PipelineContext>(i);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTemplateVisitor<TResult> typedVisitor = visitor as IGoTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 12, RULE_operand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			primary();
			State = 154;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 138;
					Match(T__9);
					State = 139;
					Match(IDENTIFIER);
					State = 140;
					Match(T__10);
					State = 149;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3984384L) != 0)) {
						{
						State = 141;
						pipeline();
						State = 146;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__11) {
							{
							{
							State = 142;
							Match(T__11);
							State = 143;
							pipeline();
							}
							}
							State = 148;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 151;
					Match(T__12);
					}
					} 
				}
				State = 156;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoTemplateParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainedFieldContext chainedField() {
			return GetRuleContext<ChainedFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PipelineContext pipeline() {
			return GetRuleContext<PipelineContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTemplateVisitor<TResult> typedVisitor = visitor as IGoTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 14, RULE_primary);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				chainedField();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159;
				variable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 160;
				functionCall();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 161;
				literal();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 162;
				Match(T__10);
				State = 163;
				pipeline();
				State = 164;
				Match(T__12);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainedFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GoTemplateParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GoTemplateParser.IDENTIFIER, i);
		}
		public ChainedFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainedField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.EnterChainedField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.ExitChainedField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTemplateVisitor<TResult> typedVisitor = visitor as IGoTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainedField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainedFieldContext chainedField() {
		ChainedFieldContext _localctx = new ChainedFieldContext(Context, State);
		EnterRule(_localctx, 16, RULE_chainedField);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(T__9);
			State = 169;
			Match(IDENTIFIER);
			State = 174;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 170;
					Match(T__9);
					State = 171;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoTemplateParser.IDENTIFIER, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTemplateVisitor<TResult> typedVisitor = visitor as IGoTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(T__13);
			State = 178;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoTemplateParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PipelineContext[] pipeline() {
			return GetRuleContexts<PipelineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PipelineContext pipeline(int i) {
			return GetRuleContext<PipelineContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTemplateVisitor<TResult> typedVisitor = visitor as IGoTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(IDENTIFIER);
			State = 181;
			Match(T__10);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3984384L) != 0)) {
				{
				State = 182;
				pipeline();
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__11) {
					{
					{
					State = 183;
					Match(T__11);
					State = 184;
					pipeline();
					}
					}
					State = 189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 192;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GoTemplateParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(GoTemplateParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(GoTemplateParser.BOOLEAN, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoTemplateListener typedListener = listener as IGoTemplateListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoTemplateVisitor<TResult> typedVisitor = visitor as IGoTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 22, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1867776L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,24,197,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,5,0,26,8,0,10,0,12,0,29,9,
		0,1,1,1,1,3,1,33,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,45,8,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,57,8,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,3,2,69,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,88,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,3,2,101,8,2,1,3,1,3,1,3,3,3,106,8,3,1,3,1,3,1,3,1,4,1,4,
		1,4,5,4,114,8,4,10,4,12,4,117,9,4,1,5,4,5,120,8,5,11,5,12,5,121,1,5,4,
		5,125,8,5,11,5,12,5,126,1,5,1,5,5,5,131,8,5,10,5,12,5,134,9,5,3,5,136,
		8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,145,8,6,10,6,12,6,148,9,6,3,6,150,
		8,6,1,6,5,6,153,8,6,10,6,12,6,156,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,3,7,167,8,7,1,8,1,8,1,8,1,8,5,8,173,8,8,10,8,12,8,176,9,8,1,9,1,9,
		1,9,1,10,1,10,1,10,1,10,1,10,5,10,186,8,10,10,10,12,10,189,9,10,3,10,191,
		8,10,1,10,1,10,1,11,1,11,1,11,0,0,12,0,2,4,6,8,10,12,14,16,18,20,22,0,
		2,2,0,10,10,21,21,2,0,15,15,18,20,213,0,27,1,0,0,0,2,32,1,0,0,0,4,100,
		1,0,0,0,6,102,1,0,0,0,8,110,1,0,0,0,10,135,1,0,0,0,12,137,1,0,0,0,14,166,
		1,0,0,0,16,168,1,0,0,0,18,177,1,0,0,0,20,180,1,0,0,0,22,194,1,0,0,0,24,
		26,3,2,1,0,25,24,1,0,0,0,26,29,1,0,0,0,27,25,1,0,0,0,27,28,1,0,0,0,28,
		1,1,0,0,0,29,27,1,0,0,0,30,33,5,22,0,0,31,33,3,4,2,0,32,30,1,0,0,0,32,
		31,1,0,0,0,33,3,1,0,0,0,34,35,5,16,0,0,35,36,3,8,4,0,36,37,5,17,0,0,37,
		101,1,0,0,0,38,39,5,16,0,0,39,40,5,1,0,0,40,41,3,8,4,0,41,42,5,17,0,0,
		42,44,3,0,0,0,43,45,3,6,3,0,44,43,1,0,0,0,44,45,1,0,0,0,45,46,1,0,0,0,
		46,47,5,16,0,0,47,48,5,2,0,0,48,49,5,17,0,0,49,101,1,0,0,0,50,51,5,16,
		0,0,51,52,5,3,0,0,52,53,3,8,4,0,53,54,5,17,0,0,54,56,3,0,0,0,55,57,3,6,
		3,0,56,55,1,0,0,0,56,57,1,0,0,0,57,58,1,0,0,0,58,59,5,16,0,0,59,60,5,2,
		0,0,60,61,5,17,0,0,61,101,1,0,0,0,62,63,5,16,0,0,63,64,5,4,0,0,64,65,3,
		8,4,0,65,66,5,17,0,0,66,68,3,0,0,0,67,69,3,6,3,0,68,67,1,0,0,0,68,69,1,
		0,0,0,69,70,1,0,0,0,70,71,5,16,0,0,71,72,5,2,0,0,72,73,5,17,0,0,73,101,
		1,0,0,0,74,75,5,16,0,0,75,76,5,5,0,0,76,77,5,18,0,0,77,78,5,17,0,0,78,
		79,3,0,0,0,79,80,5,16,0,0,80,81,5,2,0,0,81,82,5,17,0,0,82,101,1,0,0,0,
		83,84,5,16,0,0,84,85,5,6,0,0,85,87,5,18,0,0,86,88,3,8,4,0,87,86,1,0,0,
		0,87,88,1,0,0,0,88,89,1,0,0,0,89,101,5,17,0,0,90,91,5,16,0,0,91,92,5,7,
		0,0,92,93,5,18,0,0,93,94,3,8,4,0,94,95,5,17,0,0,95,96,3,0,0,0,96,97,5,
		16,0,0,97,98,5,2,0,0,98,99,5,17,0,0,99,101,1,0,0,0,100,34,1,0,0,0,100,
		38,1,0,0,0,100,50,1,0,0,0,100,62,1,0,0,0,100,74,1,0,0,0,100,83,1,0,0,0,
		100,90,1,0,0,0,101,5,1,0,0,0,102,103,5,16,0,0,103,105,5,8,0,0,104,106,
		3,8,4,0,105,104,1,0,0,0,105,106,1,0,0,0,106,107,1,0,0,0,107,108,5,17,0,
		0,108,109,3,0,0,0,109,7,1,0,0,0,110,115,3,10,5,0,111,112,5,9,0,0,112,114,
		3,10,5,0,113,111,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,
		0,116,9,1,0,0,0,117,115,1,0,0,0,118,120,3,12,6,0,119,118,1,0,0,0,120,121,
		1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,136,1,0,0,0,123,125,3,12,6,
		0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,
		128,1,0,0,0,128,132,7,0,0,0,129,131,3,12,6,0,130,129,1,0,0,0,131,134,1,
		0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,
		135,119,1,0,0,0,135,124,1,0,0,0,136,11,1,0,0,0,137,154,3,14,7,0,138,139,
		5,10,0,0,139,140,5,21,0,0,140,149,5,11,0,0,141,146,3,8,4,0,142,143,5,12,
		0,0,143,145,3,8,4,0,144,142,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,
		147,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,149,141,1,0,0,0,149,150,1,
		0,0,0,150,151,1,0,0,0,151,153,5,13,0,0,152,138,1,0,0,0,153,156,1,0,0,0,
		154,152,1,0,0,0,154,155,1,0,0,0,155,13,1,0,0,0,156,154,1,0,0,0,157,167,
		5,21,0,0,158,167,3,16,8,0,159,167,3,18,9,0,160,167,3,20,10,0,161,167,3,
		22,11,0,162,163,5,11,0,0,163,164,3,8,4,0,164,165,5,13,0,0,165,167,1,0,
		0,0,166,157,1,0,0,0,166,158,1,0,0,0,166,159,1,0,0,0,166,160,1,0,0,0,166,
		161,1,0,0,0,166,162,1,0,0,0,167,15,1,0,0,0,168,169,5,10,0,0,169,174,5,
		21,0,0,170,171,5,10,0,0,171,173,5,21,0,0,172,170,1,0,0,0,173,176,1,0,0,
		0,174,172,1,0,0,0,174,175,1,0,0,0,175,17,1,0,0,0,176,174,1,0,0,0,177,178,
		5,14,0,0,178,179,5,21,0,0,179,19,1,0,0,0,180,181,5,21,0,0,181,190,5,11,
		0,0,182,187,3,8,4,0,183,184,5,12,0,0,184,186,3,8,4,0,185,183,1,0,0,0,186,
		189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,191,1,0,0,0,189,187,1,
		0,0,0,190,182,1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,193,5,13,0,0,
		193,21,1,0,0,0,194,195,7,1,0,0,195,23,1,0,0,0,20,27,32,44,56,68,87,100,
		105,115,121,126,132,135,146,149,154,166,174,187,190
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
